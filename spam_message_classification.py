# -*- coding: utf-8 -*-
"""Spam Message Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12rjHcQqll3GXPrWrP4NaeeztIhrbTkMd

## All the Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""## Data Preprocessing """

df = pd.read_csv('spam.tsv', sep='\t')

#Displaying first 5 rows
df.head()

#Check whether we have any missing records or not, using sum to get the sum of each column for having missing values
df.isna().sum()

#Statistical Analysis on the numerical columns only
df.describe()

#Check in the label column how many messages are ham and spam
df['label'].value_counts()

ham = df[df['label'] == 'ham']
spam = df[df['label'] == 'spam']

ham.shape, spam.shape

#Grabbing randomly 747 samples from ham and put into the buckets
ham = ham.sample(spam.shape[0])

ham.shape, spam.shape

#appending the DataFrame spam to the DataFrame ham
data = ham.append(spam, ignore_index = True)
data.shape

data['label'].value_counts()

data.head()

#creating a histogram using the 'length' column of the DataFrame data for the messages labeled as 'ham' and spam'.
plt.hist(data[data['label'] == 'ham']['length'], bins = 100)
plt.hist(data[data['label'] == 'spam']['length'], bins = 100)
plt.show()

# creating a histogram using the 'punct' column of the DataFrame data for the messages labeled as 'ham' and spam'.
plt.hist(data[data['label'] == 'ham']['punct'], bins = 100)
plt.hist(data[data['label'] == 'spam']['punct'], bins = 100)
plt.show()

"""## Splitting data in Training and Testing"""

data

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test =  train_test_split(data['message'], data['label'], test_size = 0.3, random_state =  0, shuffle = True ) #30% allocation of data in testing

x_train.shape, y_train.shape

x_test.shape, y_test.shape

"""## Building the model (Random Forest)"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier

from sklearn.pipeline import Pipeline

classifier = Pipeline([("tfidf", TfidfVectorizer()) , ("classifier", RandomForestClassifier(n_estimators=100))])

classifier.fit(x_train, y_train)

"""## Predicitng the results (Random Forest)"""

y_pred = classifier.predict(x_test)

y_test, y_pred

from sklearn .metrics import classification_report, accuracy_score, confusion_matrix

accuracy_score(y_test, y_pred)

confusion_matrix(y_test, y_pred)

print(classification_report(y_test, y_pred))

"""## Building the model (SVM)"""

from sklearn.svm import SVC

svm = Pipeline([("tfidf", TfidfVectorizer()) , ("classifier", SVC(C = 100, gamma='auto'))])

svm.fit(x_train, y_train)

"""## Predicitng the results (SVM)"""

y_pred = svm.predict(x_test)

accuracy_score(y_test, y_pred)

confusion_matrix(y_test, y_pred)

print(classification_report(y_test, y_pred))

"""## Testing Data on both the model"""

test1 = ['Hello, You are learning natural Language Processing']
test2 = ['Hope you are doing good and learning new things !']
test3 = ['Congratulations, You won a lottery ticket worth $1 Million ! To claim call on 446677']

print(classifier.predict(test1))
print(classifier.predict(test2))
print(classifier.predict(test3))

print(svm.predict(test1))
print(svm.predict(test2))
print(svm.predict(test3))

